const express = require('express');
const { MessagingResponse } = require('twilio').twiml;
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.urlencoded({ extended: false }));

// Base de donn√©es temporaire (en m√©moire pour POC)
let climatheque = new Map(); // Structure: phoneNumber -> [cartes m√©t√©o]

// Configuration Mistral AI
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY;
const MISTRAL_API_URL = 'https://api.mistral.ai/v1/chat/completions';

// Syst√®me m√©t√©orologique CLEAN (plus de mots-cl√©s dans le principal)
const METEO_SYSTEM = {
  '‚òÄÔ∏è': {
    nom: 'SOLEIL',
    emoji: '‚òÄÔ∏è',
    couleur: '#FFD700',
    valeur_numerique: 5,
    description: 'Joie, bonheur, s√©r√©nit√©, euphorie, r√©ussite',
    // Messages backup (fallback seulement)
    messages_backup: [
      'Cette lumi√®re dor√©e vient de toi',
      'Ton rayonnement illumine cette journ√©e',
      'Cette joie que tu portes est contagieuse',
      'Cette √©nergie positive te caract√©rise bien',
      'Cette clart√© int√©rieure m√©rite d\'√™tre c√©l√©br√©e',
      'Ta joie rayonne et touche ceux qui t\'entourent',
      'Cette lumi√®re que tu d√©gages est pr√©cieuse',
      'Ton bonheur illumine ton chemin',
      'Cette s√©r√©nit√© que tu ressens est bien m√©rit√©e',
      'Cette euphorie positive nourrit ton √™tre'
    ]
  },
  '‚òÅÔ∏è': {
    nom: 'NUAGES',
    emoji: '‚òÅÔ∏è',
    couleur: '#B0C4DE',
    valeur_numerique: 3,
    description: 'Ennui, monotonie, neutralit√©, routine',
    messages_backup: [
      'Les nuages passent, tu demeures',
      'Cette neutralit√© a sa propre douceur',
      'Parfois, la grisaille offre une pause bienvenue',
      'Cette tranquillit√© m√©rite d\'√™tre respect√©e',
      'Dans cette grisaille, quelque chose se repose',
      'Cette monotonie prot√®ge peut-√™tre ton √©nergie',
      'Ce temps neutre a sa propre sagesse',
      'Cette routine offre parfois un r√©confort',
      'Dans cette banalit√©, tu peux trouver la paix',
      'Cette normalit√© a sa propre beaut√© discr√®te'
    ]
  },
  'üå´Ô∏è': {
    nom: 'BROUILLARD',
    emoji: 'üå´Ô∏è',
    couleur: '#D3D3D3',
    valeur_numerique: 2,
    description: 'Confusion, incertitude, perplexit√©, questionnement',
    messages_backup: [
      'Ce brouillard peut aussi √™tre une pause',
      'Dans cette confusion, une clart√© se pr√©pare',
      'L\'incertitude porte parfois de belles surprises',
      'Cette h√©sitation dit quelque chose d\'important',
      'Dans ce flou, une v√©rit√© nouvelle √©merge peut-√™tre',
      'Cette confusion est parfois le d√©but d\'une d√©couverte',
      'Ce questionnement r√©v√®le ta qu√™te de sens',
      'Dans cette perplexit√©, ton intelligence travaille',
      'Cette incertitude montre ta capacit√© √† douter',
      'Ce brouillard mental pr√©c√®de souvent la clart√©'
    ]
  },
  'üåßÔ∏è': {
    nom: 'PLUIE',
    emoji: 'üåßÔ∏è',
    couleur: '#4682B4',
    valeur_numerique: 2,
    description: 'Tristesse, m√©lancolie, nostalgie, chagrin',
    messages_backup: [
      'Chaque goutte nourrit quelque chose en toi',
      'Cette tristesse a sa propre v√©rit√©',
      'Les larmes nettoient parfois l\'√¢me',
      'Cette m√©lancolie porte une beaut√© particuli√®re',
      'Cette peine que tu ressens a du sens',
      'Dans cette tristesse, quelque chose de profond se r√©v√®le',
      'Cette m√©lancolie t√©moigne de ta sensibilit√©',
      'Ces larmes sont parfois n√©cessaires √† l\'√¢me',
      'Cette nostalgie dit quelque chose sur tes valeurs',
      'Dans ce chagrin, ton c≈ìur s\'exprime authentiquement'
    ]
  },
  '‚õàÔ∏è': {
    nom: 'ORAGE',
    emoji: '‚õàÔ∏è',
    couleur: '#8B0000',
    valeur_numerique: 1,
    description: 'Col√®re, frustration, irritation, r√©volte',
    messages_backup: [
      'Les temp√™tes int√©rieures pr√©parent souvent un ciel neuf',
      'Cette col√®re dit quelque chose d\'important sur tes besoins',
      'L\'orage nettoie l\'atmosph√®re √©motionnelle',
      'Cette frustration porte une √©nergie de changement',
      'Cette irritation r√©v√®le tes limites importantes',
      'Dans cette col√®re, une v√©rit√© puissante s\'exprime',
      'Cette r√©volte t√©moigne de tes valeurs profondes',
      'Cet orage int√©rieur peut pr√©c√©der un renouveau',
      'Cette frustration signale quelque chose d\'essentiel',
      'Dans cette temp√™te, ton authenticit√© se r√©v√®le'
    ]
  },
  '‚ùÑÔ∏è': {
    nom: 'NEIGE',
    emoji: '‚ùÑÔ∏è',
    couleur: '#E6E6FA',
    valeur_numerique: 1,
    description: 'D√©tachement, vide, anesth√©sie √©motionnelle, retrait',
    messages_backup: [
      'Sous la neige, tout se tait‚Ä¶ parfois c\'est n√©cessaire',
      'Ce silence int√©rieur prot√®ge quelque chose de pr√©cieux',
      'Cette distance √©motionnelle est peut-√™tre sage',
      'Parfois, se retirer du monde est un acte de gu√©rison',
      'Dans ce vide, quelque chose se r√©g√©n√®re peut-√™tre',
      'Cette anesth√©sie √©motionnelle prot√®ge ton √™tre',
      'Ce d√©tachement r√©v√®le ton besoin de pr√©servation',
      'Dans ce silence, ton √¢me trouve peut-√™tre le repos',
      'Cette distance est parfois une forme de sagesse',
      'Sous cette neige int√©rieure, quelque chose se pr√©serve'
    ]
  }
};

// Syst√®me de fallback ENRICHI (50+ mots-cl√©s par √©motion)
const FALLBACK_DETECTION = {
  '‚òÄÔ∏è': {
    mots_cles: [
      // Joie directe
      'heureux', 'heureuse', 'joie', 'joyeux', 'joyeuse', 'content', 'contente', 'bien', 'super', 'g√©nial', 'g√©niale', 'excellent', 'excellente', 'formidable', 'fantastique', 'merveilleux', 'merveilleuse', 'parfait', 'parfaite', 'top', 'cool', 'incroyable',
      // √ânergie positive  
      '√©panoui', '√©panouie', 'rayonne', 'rayonnant', 'rayonnante', 'sourire', 'souriant', 'souriante', 'rire', 'rigole', '√©clate', 'bonheur', 'b√©atitude', 'extase', 'euphorie', 'enthousiasme', 'enthousiaste', 'motiv√©', 'motiv√©e', 'inspir√©', 'inspir√©e',
      // R√©ussite
      'r√©ussi', 'r√©ussir', 'r√©ussite', 'succ√®s', 'victoire', 'gagn√©', 'gagnant', 'gagnante', 'triomphe', 'accompli', 'accomplie', 'fier', 'fi√®re', 'fiert√©', 'satisfait', 'satisfaite', 'accompli', 'abouti',
      // Expressions
      '√ßa marche', 'c\'est bon', 'nickel', 'sans doute', 'j\'ai r√©ussi', 'trop bien', 'au top', 'que du bonheur'
    ]
  },
  'üåßÔ∏è': {
    mots_cles: [
      // Tristesse directe
      'triste', 'tristesse', 'd√©prim√©', 'd√©prim√©e', 'd√©prime', 'mal', 'malheureux', 'malheureuse', 'm√©lancolie', 'm√©lancolique', 'cafard', 'bourdon', 'pleure', 'pleurs', 'larmes', 'chagrin', 'peine', 'nostalgie', 'nostalgique',
      // Fatigue √©motionnelle
      '√©puis√©', '√©puis√©e', 'crev√©', 'crev√©e', 'lessiv√©', 'lessiv√©e', 'vid√©', 'vid√©e', 'fatigu√©', 'fatigu√©e', 'us√©', 'us√©e', 'bout', 'fini', 'finie', 'naze', 'claqu√©', 'claqu√©e',
      // D√©couragement
      'd√©courag√©', 'd√©courag√©e', 'd√©sespoir', 'd√©sesp√©r√©', 'd√©sesp√©r√©e', 'd√©motiv√©', 'd√©motiv√©e', 'abattu', 'abattue', 'accabl√©', 'accabl√©e', 'effondr√©', 'effondr√©e', 'd√©moralis√©', 'd√©moralis√©e',
      // Expressions
      '√ßa va pas', 'c\'est dur', 'j\'en peux plus', 'ras le bol', 'marre', 'gal√®re', 'dur dur', 'pas facile'
    ]
  },
  '‚õàÔ∏è': {
    mots_cles: [
      // Col√®re directe
      '√©nerv√©', '√©nerv√©e', 'col√®re', 'furieux', 'furieuse', 'rage', 'rageur', 'rageuse', 'irrit√©', 'irrit√©e', 'agac√©', 'agac√©e', 'frustr√©', 'frustr√©e', 'exasp√©r√©', 'exasp√©r√©e', 'bouillir', 'exploser', 'fulminer',
      // Expressions col√®re
      'en col√®re', 'hors de moi', 'bout de nerfs', 'p√®te un c√¢ble', 'p√®te les plombs', 'voir rouge', 'monter au cr√©neau', 'j\'en ai marre', '√ßa m\'√©nerve', 'insupportable', 'intol√©rable',
      // Frustration
      'bloqu√©', 'bloqu√©e', 'coinc√©', 'coinc√©e', 'limit√©', 'limit√©e', 'emp√™ch√©', 'emp√™ch√©e', 'frein√©', 'frein√©e', 'contrari√©', 'contrari√©e', 'tension', 'tendu', 'tendue', 'stress', 'stress√©', 'stress√©e'
    ]
  },
  'üå´Ô∏è': {
    mots_cles: [
      // Confusion
      'confus', 'confuse', 'confusion', 'perdu', 'perdue', 'flou', 'floue', 'incertain', 'incertaine', 'perplexe', 'h√©sitant', 'h√©sitante', 'doute', 'ind√©cis', 'ind√©cise', 'incompr√©hension', 'brumeux', 'brumeuse', 'embrouill√©', 'embrouill√©e',
      // Questionnement
      'sais pas', 'comprends pas', 'pige pas', 'pourquoi', 'comment', 'bizarre', '√©trange', 'compliqu√©', 'compliqu√©e', 'difficile', 'dur √† comprendre', 'myst√®re', 'myst√©rieux', 'myst√©rieuse',
      // Expressions
      'je sais plus', 'c\'est flou', 'pas clair', 'je comprends rien', 'qu\'est-ce qui se passe', 'je suis paum√©', 'je suis largu√©e'
    ]
  },
  '‚òÅÔ∏è': {
    mots_cles: [
      // Ennui
      'ennui', 'ennuie', 'ennuyeux', 'ennuyeuse', 'morne', 'monotone', 'gris', 'grise', 'bof', 'moyen', 'moyenne', 'ordinaire', 'banal', 'banale', 'fade', 'plat', 'plate', 'routine', 'habituel', 'habituelle',
      // Neutralit√©
      '√ßa va', 'normal', 'normale', 'comme d\'habitude', 'tranquille', 'calme', 'paisible', 'serein', 'sereine', 'stable', '√©gal', '√©gale', 'constant', 'constante', 'pareil', 'pareille', 'identique'
    ]
  },
  '‚ùÑÔ∏è': {
    mots_cles: [
      // D√©tachement
      'vide', 'd√©tach√©', 'd√©tach√©e', 'distant', 'distante', 'froid', 'froide', 'absent', 'absente', 'indiff√©rent', 'indiff√©rente', 'd√©connect√©', 'd√©connect√©e', 'engourdi', 'engourdie', 'anesth√©si√©', 'anesth√©si√©e', 'gel√©', 'gel√©e',
      // Retrait
      'retir√©', 'retir√©e', 'isol√©', 'isol√©e', 'seul', 'seule', 'solitaire', 'renferm√©', 'renferm√©e', 'silence', 'silencieux', 'silencieuse', 'muet', 'muette', 'coup√©', 'coup√©e',
      // Expressions
      'j\'ai plus envie', 'je sens rien', 'compl√®tement vide', 'plus rien', 'nowhere', 'dans le vide', 'd√©connect√© de tout'
    ]
  }
};

// Fonction d'analyse √©motionnelle avec Mistral AI (PRINCIPALE)
async function analyserAvecMistralAI(message) {
  try {
    const prompt = `Tu es un expert en analyse √©motionnelle. Analyse ce message et g√©n√®re AUSSI un message po√©tique personnalis√©.

Message: "${message}"

R√©ponds UNIQUEMENT par un JSON avec cette structure exacte:
{
  "emotion_principale": "joie|tristesse|colere|confusion|ennui|detachement",
  "intensite": 1-5,
  "contexte": {
    "lieu": "bureau|maison|transport|lieu_social|autre|non_specifie",
    "personnes": ["pr√©nom1", "pr√©nom2"] ou [],
    "activite": "travail|loisir|social|repos|sport|autre|non_specifie",
    "temporel": "matin|apres_midi|soir|week_end|autre|non_specifie"
  },
  "mots_cles": ["mot1", "mot2", "mot3"],
  "sentiment_global": "positif|neutre|negatif",
  "message_poetique": "phrase po√©tique personnalis√©e de 8-15 mots maximum",
  "insight_personnalise": "insight empathique de 12-20 mots maximum"
}

G√©n√®re un message po√©tique et un insight UNIQUES adapt√©s √† ce message sp√©cifique.`;

    const response = await axios.post(MISTRAL_API_URL, {
      model: 'mistral-tiny',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.4,
      max_tokens: 400
    }, {
      headers: {
        'Authorization': `Bearer ${MISTRAL_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const analysis = JSON.parse(response.data.choices[0].message.content);
    console.log('‚úÖ Analyse Mistral r√©ussie:', analysis);
    return { success: true, data: analysis };

  } catch (error) {
    console.error('‚ùå Erreur Mistral AI:', error.response?.data || error.message);
    return { success: false, error: error.message };
  }
}

// Fonction de fallback ENRICHIE avec warning
function analyseAvecFallback(message) {
  console.log('‚ö†Ô∏è Passage en mode fallback enrichi');
  
  const texte = message.toLowerCase();
  const scores = {};
  
  // Calculer scores pour chaque m√©t√©o
  for (const [emoji, system] of Object.entries(FALLBACK_DETECTION)) {
    scores[emoji] = 0;
    for (const mot of system.mots_cles) {
      if (texte.includes(mot)) {
        scores[emoji] += 1;
      }
    }
  }
  
  // Trouver la m√©t√©o avec le meilleur score
  const meteoDetectee = Object.keys(scores).reduce((a, b) => 
    scores[a] > scores[b] ? a : b
  );
  
  const meteoInfo = METEO_SYSTEM[meteoDetectee];
  const finalMeteo = scores[meteoDetectee] > 0 ? meteoDetectee : 'üå´Ô∏è';
  
  // Message backup al√©atoire
  const messageBackup = meteoInfo.messages_backup[
    Math.floor(Math.random() * meteoInfo.messages_backup.length)
  ];
  
  return {
    emotion_principale: mapEmotionFromMeteo(finalMeteo),
    intensite: Math.ceil(Math.random() * 3) + 1, // 1-4 en fallback
    contexte: {
      lieu: 'non_specifie',
      personnes: [],
      activite: 'non_specifie', 
      temporel: 'non_specifie'
    },
    mots_cles: extraireMots(message),
    sentiment_global: scores[finalMeteo] > 0 ? 'detecte' : 'neutre',
    message_poetique: messageBackup,
    insight_personnalise: 'Analyse simplifi√©e - les nuances fines n√©cessitent notre IA principale.',
    fallback_warning: true
  };
}

// Fonction helper mapping m√©t√©o ‚Üí √©motion
function mapEmotionFromMeteo(meteo) {
  const mapping = {
    '‚òÄÔ∏è': 'joie',
    'üåßÔ∏è': 'tristesse', 
    '‚õàÔ∏è': 'colere',
    'üå´Ô∏è': 'confusion',
    '‚òÅÔ∏è': 'ennui',
    '‚ùÑÔ∏è': 'detachement'
  };
  return mapping[meteo] || 'confusion';
}

// Fonction mapping √©motion ‚Üí m√©t√©o
function mapperEmotionVersMeteo(emotion) {
  const mapping = {
    'joie': '‚òÄÔ∏è',
    'tristesse': 'üåßÔ∏è',
    'colere': '‚õàÔ∏è', 
    'confusion': 'üå´Ô∏è',
    'ennui': '‚òÅÔ∏è',
    'detachement': '‚ùÑÔ∏è'
  };
  return mapping[emotion] || 'üå´Ô∏è';
}

// Fonction extraction mots basique
function extraireMots(message) {
  const motsvides = ['je', 'tu', 'il', 'elle', 'nous', 'vous', 'ils', 'elles', 'le', 'la', 'les', 'un', 'une', 'des', 'du', 'de', 'avec', 'dans', 'sur', 'pour', 'par', 'sans', 'sous', 'vers', 'chez', 'et', 'ou', 'mais', 'donc', 'car', 'que', 'qui', 'quoi', 'o√π', 'quand', 'comment', 'pourquoi', 'ce', 'cette', 'ces', 'mon', 'ma', 'mes', 'ton', 'ta', 'tes', 'son', 'sa', 'ses'];
  
  return message.toLowerCase()
    .replace(/[^\w\s]/g, ' ')
    .split(/\s+/)
    .filter(mot => mot.length > 3 && !motsvides.includes(mot))
    .slice(0, 4);
}

// Fonction de g√©n√©ration de carte m√©t√©o COMPL√àTE V4.0
async function genererCarteComplete(message, phoneNumber) {
  console.log('üß† Analyse compl√®te V4.0 en cours...');
  
  const historique = climatheque.get(phoneNumber) || [];
  
  // Tentative analyse IA principale
  const analysisResult = await analyserAvecMistralAI(message);
  
  let analysis;
  let useFallback = false;
  
  if (analysisResult.success) {
    analysis = analysisResult.data;
    console.log('‚úÖ Analyse IA principale r√©ussie');
  } else {
    analysis = analyseAvecFallback(message);
    useFallback = true;
    console.log('‚ö†Ô∏è Utilisation du fallback enrichi');
  }
  
  // Mapper vers m√©t√©o
  const meteo = mapperEmotionVersMeteo(analysis.emotion_principale);
  const meteoInfo = METEO_SYSTEM[meteo];
  
  const timestamp = new Date();
  
  const carte = {
    id: Date.now(),
    timestamp: timestamp,
    date: timestamp.toLocaleDateString('fr-FR'),
    heure: timestamp.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
    message_original: message,
    meteo: meteo,
    nom_meteo: meteoInfo.nom,
    message_poetique: analysis.message_poetique,
    couleur: meteoInfo.couleur,
    mots_cles: analysis.mots_cles,
    insight_empathique: analysis.insight_personnalise,
    contexte: analysis.contexte,
    intensite: analysis.intensite,
    analysis_complete: analysis,
    fallback_used: useFallback
  };
  
  // Ajouter √† la climatoth√®que
  if (!climatheque.has(phoneNumber)) {
    climatheque.set(phoneNumber, []);
  }
  climatheque.get(phoneNumber).push(carte);
  
  return carte;
}

// Fonction de d√©tection de patterns avanc√©s
function detecterPatternsAvances(phoneNumber) {
  const cartes = climatheque.get(phoneNumber) || [];
  if (cartes.length < 3) return null;
  
  const patterns = [];
  
  // Pattern 1: Corr√©lations lieu-√©motion (seuil: 3+ occurrences)
  const lieuStats = {};
  cartes.forEach(carte => {
    if (carte.contexte?.lieu && carte.contexte.lieu !== 'non_specifie') {
      if (!lieuStats[carte.contexte.lieu]) {
        lieuStats[carte.contexte.lieu] = { total: 0, emotions: {} };
      }
      lieuStats[carte.contexte.lieu].total++;
      if (!lieuStats[carte.contexte.lieu].emotions[carte.meteo]) {
        lieuStats[carte.contexte.lieu].emotions[carte.meteo] = 0;
      }
      lieuStats[carte.contexte.lieu].emotions[carte.meteo]++;
    }
  });
  
  // Analyser les patterns lieux (seuil: 3+ entr√©es, 70%+ r√©currence)
  for (const [lieu, stats] of Object.entries(lieuStats)) {
    if (stats.total >= 3) {
      for (const [meteo, count] of Object.entries(stats.emotions)) {
        const pourcentage = Math.round((count / stats.total) * 100);
        if (pourcentage >= 70) {
          patterns.push(`üè¢ ${lieu}: ${meteo} dans ${pourcentage}% des cas (${count}/${stats.total})`);
        }
      }
    }
  }
  
  // Pattern 2: Corr√©lations personnes-√©motion
  const personnesStats = {};
  cartes.forEach(carte => {
    if (carte.contexte?.personnes && carte.contexte.personnes.length > 0) {
      carte.contexte.personnes.forEach(personne => {
        if (!personnesStats[personne]) {
          personnesStats[personne] = { total: 0, emotions: {} };
        }
        personnesStats[personne].total++;
        if (!personnesStats[personne].emotions[carte.meteo]) {
          personnesStats[personne].emotions[carte.meteo] = 0;
        }
        personnesStats[personne].emotions[carte.meteo]++;
      });
    }
  });
  
  // Analyser les patterns personnes (seuil: 2+ entr√©es, 75%+ r√©currence)
  for (const [personne, stats] of Object.entries(personnesStats)) {
    if (stats.total >= 2) {
      for (const [meteo, count] of Object.entries(stats.emotions)) {
        const pourcentage = Math.round((count / stats.total) * 100);
        if (pourcentage >= 75) {
          patterns.push(`üë§ Avec ${personne}: ${meteo} dans ${pourcentage}% des cas (${count}/${stats.total})`);
        }
      }
    }
  }
  
  // Pattern 3: √âvolution temporelle (am√©lioration/d√©gradation)
  if (cartes.length >= 5) {
    const recent = cartes.slice(-3);
    const ancien = cartes.slice(-6, -3);
    
    if (ancien.length === 3) {
      const moyenneRecent = recent.reduce((sum, c) => sum + (METEO_SYSTEM[c.meteo].valeur_numerique), 0) / 3;
      const moyenneAncien = ancien.reduce((sum, c) => sum + (METEO_SYSTEM[c.meteo].valeur_numerique), 0) / 3;
      
      const evolution = moyenneRecent - moyenneAncien;
      if (Math.abs(evolution) >= 1) {
        const trend = evolution > 0 ? 'üìà Am√©lioration' : 'üìâ D√©gradation';
        patterns.push(`${trend} r√©cente: ${moyenneAncien.toFixed(1)} ‚Üí ${moyenneRecent.toFixed(1)}/5`);
      }
    }
  }
  
  return patterns.length > 0 ? patterns.slice(0, 2) : null; // Max 2 patterns
}

// Fonction de g√©n√©ration de rapport patterns complet
function genererRapportPatterns(phoneNumber) {
  const cartes = climatheque.get(phoneNumber) || [];
  if (cartes.length < 5) {
    return `üìä ‚ïê‚ïê‚ïê PATTERNS ‚ïê‚ïê‚ïê\n\n‚è≥ ${cartes.length}/5 cartes minimum\n\nContinue √† partager tes √©tats d'esprit pour r√©v√©ler tes patterns √©motionnels personnels !`;
  }
  
  let rapport = `üìä ‚ïê‚ïê‚ïê TES PATTERNS ‚ïê‚ïê‚ïê\n\nüíé ${cartes.length} analyses dans ta climatoth√®que\n\n`;
  
  // Statistiques g√©n√©rales m√©t√©o
  const meteoStats = {};
  cartes.forEach(carte => {
    if (!meteoStats[carte.meteo]) meteoStats[carte.meteo] = 0;
    meteoStats[carte.meteo]++;
  });
  
  rapport += `üå§Ô∏è TES M√âT√âOS DOMINANTES:\n`;
  Object.entries(meteoStats)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3)
    .forEach(([meteo, count]) => {
      const pourcentage = Math.round((count / cartes.length) * 100);
      rapport += `   ${meteo} ${pourcentage}% (${count}/${cartes.length})\n`;
    });
  
  // Patterns avanc√©s
  const patterns = detecterPatternsAvances(phoneNumber);
  if (patterns) {
    rapport += `\nüîÆ PATTERNS D√âTECT√âS:\n`;
    patterns.forEach(pattern => {
      rapport += `   ‚Ä¢ ${pattern}\n`;
    });
  }
  
  // Intensit√© moyenne
  const intensiteMoyenne = cartes.reduce((sum, c) => sum + c.intensite, 0) / cartes.length;
  rapport += `\n‚ö° INTENSIT√â MOYENNE: ${intensiteMoyenne.toFixed(1)}/5\n`;
  
  // √âvolution r√©cente
  if (cartes.length >= 6) {
    const recent = cartes.slice(-3);
    const moyenneRecent = recent.reduce((sum, c) => sum + (METEO_SYSTEM[c.meteo].valeur_numerique), 0) / 3;
    rapport += `\nüìà TENDANCE R√âCENTE: ${moyenneRecent.toFixed(1)}/5\n`;
  }
  
  rapport += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüí´ Tes patterns r√©v√®lent ton paysage √©motionnel unique`;
  
  return rapport;
}

// Fonction de formatage de r√©ponse V4.0 (sans cartes visuelles)
function formaterReponseV4(carte, patterns = null) {
  let response = '';
  
  // Warning si fallback utilis√©
  if (carte.fallback_used) {
    response += `‚ö†Ô∏è Analyse simplifi√©e (IA temporairement indisponible)\n\n`;
  }
  
  // Header avec intensit√©
  const intensiteEmoji = '‚óè'.repeat(carte.intensite) + '‚óã'.repeat(5 - carte.intensite);
  response += `${carte.meteo} ‚ïê‚ïê‚ïê ${carte.nom_meteo} ‚ïê‚ïê‚ïê\n`;
  response += `${intensiteEmoji} Intensit√© ${carte.intensite}/5\n\n`;
  
  // Citation + message po√©tique
  response += `üí≠ "${carte.message_original}"\n\n`;
  response += `‚ú® ${carte.message_poetique}\n\n`;
  
  // Contexte extrait (si significatif)
  if (carte.contexte?.lieu !== 'non_specifie' || carte.contexte?.activite !== 'non_specifie' || carte.mots_cles.length > 0) {
    response += `üéØ `;
    if (carte.contexte.lieu !== 'non_specifie') response += `üìç${carte.contexte.lieu} `;
    if (carte.contexte.activite !== 'non_specifie') response += `‚ö°${carte.contexte.activite} `;
    if (carte.contexte.personnes.length > 0) response += `üë•${carte.contexte.personnes.join(', ')} `;
    if (carte.mots_cles.length > 0) response += `‚Ä¢ ${carte.mots_cles.slice(0, 3).join(' ‚Ä¢ ')}`;
    response += `\n\n`;
  }
  
  // Insight empathique IA
  response += `üíù ${carte.insight_empathique}\n\n`;
  
  // Pattern d√©tect√©
  if (patterns && patterns.length > 0) {
    response += `üåÄ PATTERNS D√âTECT√âS:\n`;
    patterns.slice(0, 1).forEach(pattern => {
      response += `‚Ä¢ ${pattern}\n`;
    });
    response += `\n`;
  }
  
  // Footer
  response += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  response += `üìö Analys√© par ${carte.fallback_used ? 'syst√®me enrichi' : 'IA Mistral'}\n`;
  response += `   ‚îî ${carte.date} ‚Ä¢ ${carte.heure}`;
  
  return response;
}

// Routes
app.get('/', (req, res) => {
  res.send(`
    <h1>üå§Ô∏è MoodMap WhatsApp Bot V4.0 - Smart Patterns</h1>
    <p><strong>Status:</strong> üü¢ INTELLIGENT & STABLE!</p>
    <p><strong>Features:</strong></p>
    <ul>
      <li>üß† Mistral AI emotional analysis with personalized insights</li>
      <li>üìä Advanced pattern detection (places, people, activities)</li>
      <li>üõ°Ô∏è Enriched fallback system (50+ keywords per emotion)</li>
      <li>üíù Unique poetic messages generated by AI</li>
      <li>üìà Statistical correlations and trend analysis</li>
      <li>üéØ Smart onboarding and user guidance</li>
    </ul>
    <p><strong>Mistral AI:</strong> ${MISTRAL_API_KEY ? '‚úÖ Connected' : '‚ùå Not configured'}</p>
    <p><strong>Patterns:</strong> ‚úÖ Advanced correlations enabled</p>
    <p><strong>Commands:</strong> climatoth√®que, patterns</p>
    <p><strong>Webhook:</strong> <code>/webhook</code></p>
  `);
});

app.get('/health', (req, res) => {
  const stats = {
    status: 'OK',
    version: '4.0 - SMART PATTERNS',
    message: 'MoodMap Bot V4.0 - Advanced Patterns + Enhanced AI!',
    timestamp: new Date().toISOString(),
    mistral_ai: MISTRAL_API_KEY ? 'Connected' : 'Not configured',
    features: [
      'Mistral AI emotion analysis',
      'Advanced pattern detection',
      'Enriched fallback system (50+ keywords)', 
      'Personalized empathic insights',
      'Statistical correlations',
      'Pattern predictions',
      'Visual cards (coming with server upgrade)'
    ],
    total_users: climatheque.size,
    total_cards: Array.from(climatheque.values()).reduce((sum, cards) => sum + cards.length, 0)
  };
  res.status(200).json(stats);
});

// Route principale WhatsApp V4.0
app.post('/webhook', async (req, res) => {
  console.log('üì± Message re√ßu V4.0 (SMART PATTERNS):', req.body);
  
  const incomingMessage = req.body.Body || '';
  const fromNumber = req.body.From || '';
  
  console.log(`üí¨ De ${fromNumber}: "${incomingMessage}"`);
  
  const twiml = new MessagingResponse();
  
  try {
    // Commandes sp√©ciales
    if (incomingMessage.toLowerCase().includes('climatoth√®que')) {
      const cartes = climatheque.get(fromNumber) || [];
      if (cartes.length === 0) {
        const response = `üìö ‚ïê‚ïê‚ïê TA CLIMATOTH√àQUE ‚ïê‚ïê‚ïê\n\nüå± Ta collection d'analyses √©motionnelles est encore vide.\n\nüí° POUR COMMENCER :\nPartage-moi simplement ton √©tat d'esprit :\n‚Ä¢ "Je suis fatigu√© aujourd'hui"\n‚Ä¢ "√áa va plut√¥t bien !"\n‚Ä¢ "Stress√© par ce projet"\n\nüéØ Je vais analyser ton √©motion et cr√©er ta premi√®re carte m√©t√©o personnalis√©e !\n\n‚ú® Chaque analyse r√©v√®le un aspect de ton paysage √©motionnel.`;
        twiml.message(response);
      } else {
        const response = `üìö ‚ïê‚ïê‚ïê TA CLIMATOTH√àQUE ‚ïê‚ïê‚ïê\n\nüíé ${cartes.length} carte${cartes.length > 1 ? 's' : ''} m√©t√©o analys√©e${cartes.length > 1 ? 's' : ''} par IA\n\nüìà TES DERNI√àRES ANALYSES :\n${cartes.slice(-3).map(c => `${c.meteo} ${c.date} ‚Ä¢ ${c.nom_meteo} ${'‚óè'.repeat(c.intensite)}${'‚óã'.repeat(5 - c.intensite)}`).join('\n')}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüß† Chaque carte = analyse IA personnalis√©e\nüìä Tapez "patterns" pour voir vos corr√©lations\nüí° Continuez √† partager vos √©motions pour plus de patterns !`;
        twiml.message(response);
      }
    }
    else if (incomingMessage.toLowerCase().includes('patterns')) {
      const rapport = genererRapportPatterns(fromNumber);
      twiml.message(rapport);
    }
    // Analyse compl√®te
    else if (incomingMessage.length > 8) {
      console.log('üöÄ D√©but analyse V4.0 compl√®te...');
      const carte = await genererCarteComplete(incomingMessage, fromNumber);
      const patterns = detecterPatternsAvances(fromNumber);
      const response = formaterReponseV4(carte, patterns);
      
      twiml.message(response);
      console.log('‚úÖ R√©ponse V4.0 g√©n√©r√©e avec succ√®s');
    }
    // Message d'accueil et onboarding
    else {
      const response = `üå§Ô∏è ‚ïê‚ïê‚ïê BIENVENUE SUR MOODMAP ‚ïê‚ïê‚ïê\n\nüëã Salut ! Je suis ton assistant d'intelligence √©motionnelle.\n\nüí¨ COMMENT √áA MARCHE :\nD√©cris-moi ton √©tat d'esprit en une phrase :\n‚Ä¢ "Je me sens stress√© au travail"\n‚Ä¢ "Super heureuse avec mes amis" \n‚Ä¢ "Un peu confus aujourd'hui"\n\nüéØ JE VAIS :\n‚Ä¢ Analyser ton √©motion avec l'IA Mistral\n‚Ä¢ Te donner ta "m√©t√©o √©motionnelle" üå¶Ô∏è\n‚Ä¢ D√©tecter tes patterns personnels\n‚Ä¢ G√©n√©rer des insights empathiques\n\nüìö COMMANDES UTILES :\n‚Ä¢ "climatoth√®que" ‚Üí Ton historique complet\n‚Ä¢ "patterns" ‚Üí Tes corr√©lations intelligentes\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ú® Essaie maintenant avec ton humeur du moment !`;
      twiml.message(response);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur V4.0:', error);
    twiml.message(`üîß Erreur temporaire V4.0.\nR√©essaie dans quelques secondes !`);
  }
  
  res.type('text/xml').send(twiml.toString());
});

// D√©marrer le serveur
app.listen(PORT, () => {
  console.log(`üöÄ MoodMap WhatsApp Bot V4.0 SMART PATTERNS d√©marr√© sur le port ${PORT}`);
  console.log(`üß† Mistral AI: ${MISTRAL_API_KEY ? 'ACTIV√â ‚úÖ' : 'NON CONFIGUR√â ‚ùå'}`);
  console.log(`üìä Patterns avanc√©s: ACTIV√âS ‚úÖ`);
  console.log(`üõ°Ô∏è Fallback enrichi (50+ mots-cl√©s): ACTIV√â ‚úÖ`);
  console.log(`üíù Messages IA personnalis√©s: ACTIV√âS ‚úÖ`);
  console.log(`üéØ Onboarding intelligent: ACTIV√â ‚úÖ`);
  console.log(`üåê URL: ${process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`}`);
  console.log(`üì± Webhook: ${process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`}/webhook`);
});
