// MoodMap WhatsApp Bot V6.0 PRODUCT üöÄ
// Clean, Product-Ready, User-Focused
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const twilio = require('twilio');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 10000;

app.use(bodyParser.urlencoded({ extended: false }));

// Configuration
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const mistralApiKey = process.env.MISTRAL_API_KEY;
const client = twilio(accountSid, authToken);

console.log('üöÄ MoodMap WhatsApp Bot V6.0 PRODUCT d√©marr√© sur port 10000');
console.log('üéØ Focus : UX Clean, Sans Friction, Product-Ready');
console.log('üí™ Ready for real users !');

// ===== BASE DE DONN√âES EN M√âMOIRE =====
let userData = {}; // Structure: {userId: {cartes: [], habitudes: [], config: {}}}

// ===== CONFIGURATION UTILISATEUR PAR D√âFAUT =====
const defaultUserConfig = {
  meteo_active: true,
  notifications: {
    rappels_quotidiens: false,
    rappel_hebdo: false,
    alerte_patterns: false,
    heure_rappel: "20:00"
  }
};

// ===== FAMILLES D'√âMOTIONS =====
const famillesEmotions = {
  joie: ['plaisir', 'fiert√©', 'amusement', 'gratitude', 'bonheur', 'euphorie'],
  tristesse: ['m√©lancolie', 'solitude', 'peine', 'chagrin', 'd√©sespoir'],
  col√®re: ['irritation', 'frustration', 'rage', 'agacement', 'fureur'],
  peur: ['inqui√©tude', 'anxi√©t√©', 'stress', 'angoisse', 'terreur'],
  surprise: ['√©tonnement', 'choc', 'curiosit√©', 'stup√©faction'],
  d√©go√ªt: ['rejet', 'aversion', 'g√™ne', 'r√©pulsion'],
  s√©r√©nit√©: ['calme', 'paix', 'soulagement', 'tranquillit√©'],
  amour: ['tendresse', 'affection', 'passion', 'attachement'],
  fatigue: ['lassitude', '√©puisement', 'surmenage', 'usure'],
  motivation: ['espoir', 'enthousiasme', 'd√©termination', 'ambition']
};

// ===== M√âT√âOS √âMOTIONNELLES - SYST√àME FIG√â (Familles √ó Intensit√© 1-5) =====
// PRINCIPE : Structure fixe par famille d'√©motion avec 5 niveaux d'intensit√© pr√©cis
// OBJECTIF : Coh√©rence, pr√©visibilit√©, mapping exact √©motion/intensit√© ‚Üí m√©t√©o
// √âVITER : G√©n√©ration al√©atoire, variabilit√©, incoh√©rence entre sessions
const meteoEmotionnelle = {
  joie: [
    { niveau: 1, label: "Soleil timide", emoji: "üå§Ô∏è" },
    { niveau: 2, label: "Soleil doux", emoji: "üå§Ô∏è" },
    { niveau: 3, label: "Soleil radieux", emoji: "‚òÄÔ∏è" },
    { niveau: 4, label: "Soleil √©clatant", emoji: "‚òÄÔ∏è" },
    { niveau: 5, label: "Soleil chaleureux", emoji: "üåû" }
  ],
  tristesse: [
    { niveau: 1, label: "Gouttes √©parses", emoji: "üåßÔ∏è" },
    { niveau: 2, label: "Bruine l√©g√®re", emoji: "üåßÔ∏è" },
    { niveau: 3, label: "Averse mod√©r√©e", emoji: "üåßÔ∏è" },
    { niveau: 4, label: "Pluie battante", emoji: "üåßÔ∏è" },
    { niveau: 5, label: "D√©luge", emoji: "üåßÔ∏è" }
  ],
  col√®re: [
    { niveau: 1, label: "Brise l√©g√®re", emoji: "üí®" },
    { niveau: 2, label: "Vent frais", emoji: "üí®" },
    { niveau: 3, label: "Vent soutenu", emoji: "üí®" },
    { niveau: 4, label: "Bourrasques", emoji: "üí®" },
    { niveau: 5, label: "Temp√™te", emoji: "üí®" }
  ],
  peur: [
    { niveau: 1, label: "L√©g√®re brume", emoji: "üå´Ô∏è" },
    { niveau: 2, label: "Brouillard diffus", emoji: "üå´Ô∏è" },
    { niveau: 3, label: "Brouillard √©pais", emoji: "üå´Ô∏è" },
    { niveau: 4, label: "Brouillard dense", emoji: "üå´Ô∏è" },
    { niveau: 5, label: "Brouillard opaque", emoji: "üå´Ô∏è" }
  ],
  surprise: [
    { niveau: 1, label: "Ciel mena√ßant", emoji: "‚õàÔ∏è" },
    { niveau: 2, label: "Premiers grondements", emoji: "‚õàÔ∏è" },
    { niveau: 3, label: "Orage mod√©r√©", emoji: "‚õàÔ∏è" },
    { niveau: 4, label: "Orage fort", emoji: "‚õàÔ∏è" },
    { niveau: 5, label: "Orage violent", emoji: "‚õàÔ∏è" }
  ],
  d√©go√ªt: [
    { niveau: 1, label: "Flocons √©pars", emoji: "üå®Ô∏è" },
    { niveau: 2, label: "Petite neige", emoji: "üå®Ô∏è" },
    { niveau: 3, label: "Neige mod√©r√©e", emoji: "üå®Ô∏è" },
    { niveau: 4, label: "Neige √©paisse", emoji: "üå®Ô∏è" },
    { niveau: 5, label: "Temp√™te de neige", emoji: "üå®Ô∏è" }
  ],
  s√©r√©nit√©: [
    { niveau: 1, label: "Arc-en-ciel p√¢le", emoji: "üåà" },
    { niveau: 2, label: "Arc-en-ciel d√©licat", emoji: "üåà" },
    { niveau: 3, label: "Arc-en-ciel lumineux", emoji: "üåà" },
    { niveau: 4, label: "Arc-en-ciel vibrant", emoji: "üåà" },
    { niveau: 5, label: "Arc-en-ciel flamboyant", emoji: "üåà" }
  ],
  amour: [
    { niveau: 1, label: "Aurore naissante", emoji: "üåÖ" },
    { niveau: 2, label: "Aube claire", emoji: "üåÖ" },
    { niveau: 3, label: "Premier rayon", emoji: "üåÖ" },
    { niveau: 4, label: "√âclat dor√©", emoji: "üåÖ" },
    { niveau: 5, label: "Soleil lev√©", emoji: "üåÖ" }
  ],
  fatigue: [
    { niveau: 1, label: "Nuages √©pars", emoji: "‚òÅÔ∏è" },
    { niveau: 2, label: "Ciel partiellement couvert", emoji: "‚òÅÔ∏è" },
    { niveau: 3, label: "Ciel tr√®s nuageux", emoji: "‚òÅÔ∏è" },
    { niveau: 4, label: "Ciel couvert", emoji: "‚òÅÔ∏è" },
    { niveau: 5, label: "Ciel plomb√©", emoji: "‚òÅÔ∏è" }
  ],
  motivation: [
    { niveau: 1, label: "Brise douce", emoji: "üçÉ" },
    { niveau: 2, label: "Souffle d'√©lan", emoji: "üçÉ" },
    { niveau: 3, label: "Vent de face", emoji: "üçÉ" },
    { niveau: 4, label: "Rafales d'√©nergie", emoji: "üçÉ" },
    { niveau: 5, label: "Temp√™te ascendante", emoji: "üçÉ" }
  ]
};

// ===== MOTS-CL√âS COMMANDES =====
const commandes = {
  // Navigation principale
  'journal': 'handleJournal',
  'habitudes': 'handleHabitudes', 
  'param√®tres': 'handleParametres',
  'parametres': 'handleParametres',
  'aide': 'handleAide',
  'help': 'handleAide',
  
  // Journal sp√©cifique
  'journal semaine': 'handleJournalSemaine',
  'journal mois': 'handleJournalMois',
  'journal stats': 'handleJournalStats',
  'journal soleil': 'handleJournalSoleil',
  'journal joie': 'handleJournalJoie',
  'journal tristesse': 'handleJournalTristesse',
  
  // Habitudes sp√©cifique
  'habitudes temps': 'handleHabitudesTemps',
  'habitudes relations': 'handleHabitudesRelations',
  'habitudes lieux': 'handleHabitudesLieux',
  'habitudes formules': 'handleHabitudesFormules',
  
  // Param√®tres
  'm√©t√©o on': 'handleMeteoOn',
  'm√©t√©o off': 'handleMeteoOff',
  'meteo on': 'handleMeteoOn',
  'meteo off': 'handleMeteoOff',
  'notifications on': 'handleNotificationsOn',
  'notifications off': 'handleNotificationsOff',
  'export': 'handleExport',
  'reset': 'handleReset',
  
  // Utilitaires
  'annule': 'handleAnnule',
  'annuler': 'handleAnnule'
};

// ===== SALUTATIONS =====
const salutations = ['salut', 'hello', 'bonjour', 'bonsoir', 'coucou', 'hey', 'hi', 'yo', 'cc'];

// ===== MOTS INTERDITS & D√âTECTION =====
const motsInsultes = ['connard', 'putain', 'merde', 'encul√©', 'salope', 'fdp'];
const motsSpam = ['test', 'azerty', '123456', 'qwerty'];

// ===== CLASSE DE D√âTECTION D'ENTR√âES =====
// OBJECTIF MVP : G√©rer tous les cas particuliers pour UX fluide
// PRINCIPE : Distinguer insultes, spam, charabia pour r√©ponses adapt√©es
class InputDetector {
  static detectType(message, userId) {
    const msg = message.toLowerCase().trim();
    
    // Message vide
    if (!msg || msg.length === 0) {
      return { type: 'empty' };
    }
    
    // Salutations (UX : accueil chaleureux)
    if (salutations.includes(msg) || salutations.some(s => msg.startsWith(s))) {
      return { type: 'greeting' };
    }
    
    // Commandes (priorit√© haute pour navigation)
    for (const [cmd, handler] of Object.entries(commandes)) {
      if (msg === cmd || msg.startsWith(cmd + ' ')) {
        return { type: 'command', command: cmd, handler: handler };
      }
    }
    
    // Messages trop courts (sauf commandes)
    if (msg.length < 3) {
      return { type: 'too_short' };
    }
    
    // Messages trop longs (UX : encourager concision)
    if (msg.length > 500) {
      return { type: 'too_long' };
    }
    
    // Insultes (r√©ponse empathique sp√©cifique)
    if (motsInsultes.some(mot => msg.includes(mot))) {
      return { type: 'insulte' };
    }
    
    // Spam/tests techniques
    if (motsSpam.some(mot => msg.includes(mot)) || 
        /^[0-9]+$/.test(msg) || 
        /^[a-z]{1,6}$/.test(msg)) {
      return { type: 'spam' };
    }
    
    // Charabia/incompr√©hensible (caract√®res sp√©ciaux, pas de voyelles...)
    if (/^[^aeiouAEIOU\s]{4,}$/.test(msg) || 
        /[^a-zA-Z0-9\s\-\'\.,!?√©√®√†√π√ß]{3,}/.test(msg)) {
      return { type: 'charabia' };
    }
    
    // Doublon (UX : √©viter r√©p√©tition)
    const lastMessage = userData[userId]?.last_message;
    if (lastMessage && lastMessage === msg) {
      return { type: 'duplicate' };
    }
    
    // Message √©motionnel valide
    return { type: 'emotion', message: msg };
  }
}

// ===== ANALYSEUR D'√âMOTIONS =====
async function analyzeEmotionWithMistral(message) {
  console.log('üß† Analyse √©motionnelle Mistral...');
  
  try {
    const response = await axios.post('https://api.mistral.ai/v1/chat/completions', {
      model: 'mistral-tiny',
      messages: [{
        role: 'user',
        content: `Analyse ce message √©motionnel et r√©ponds UNIQUEMENT avec un objet JSON:

Message: "${message}"

Format JSON requis:
{
  "emotion_principale": "nom de l'√©motion principale",
  "famille": "famille d'√©motion (joie, tristesse, col√®re, peur, etc.)",
  "intensite": nombre de 1 √† 10,
  "nuance": "nuance sp√©cifique de l'√©motion",
  "cause": "r√©sum√© court de la cause/situation",
  "emotions_secondaires": [{"emotion": "nom", "intensite": nombre}]
}

Sois pr√©cis et factuel.`
      }],
      temperature: 0.3,
      max_tokens: 300
    }, {
      headers: {
        'Authorization': `Bearer ${mistralApiKey}`,
        'Content-Type': 'application/json'
      }
    });

    const content = response.data.choices[0].message.content.trim();
    
    // Parser le JSON
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    const jsonString = jsonMatch ? jsonMatch[0] : content;
    const analysis = JSON.parse(jsonString);
    
    return {
      emotion_principale: analysis.emotion_principale || 'neutre',
      famille: analysis.famille || 's√©r√©nit√©',
      intensite: Math.max(1, Math.min(10, analysis.intensite || 5)),
      nuance: analysis.nuance || '',
      cause: analysis.cause || '',
      emotions_secondaires: analysis.emotions_secondaires || []
    };
    
  } catch (error) {
    console.error('‚ùå Erreur Mistral:', error.message);
    
    // Fallback simple
    return {
      emotion_principale: 'ressenti',
      famille: 's√©r√©nit√©',
      intensite: 5,
      nuance: 'expression personnelle',
      cause: 'partage d\'√©motion',
      emotions_secondaires: []
    };
  }
}

// ===== GESTIONNAIRE DE COMMANDES =====
class CommandHandler {
  
  static handleJournal(userId) {
    if (!userData[userId] || !userData[userId].cartes || userData[userId].cartes.length === 0) {
      return `üìö TON JOURNAL EST VIDE\n\nCommence par me raconter ce que tu ressens ! üòä`;
    }

    const cartes = userData[userId].cartes.slice(-3); // 3 derni√®res
    let message = `üìÖ TON JOURNAL (${cartes.length} derni√®res cartes)\n\n`;
    
    cartes.reverse().forEach(carte => {
      const date = new Date(carte.timestamp).toLocaleDateString('fr-FR');
      const heure = new Date(carte.timestamp).toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'});
      
      message += `${date} ${heure} ‚Ä¢ ${carte.meteo_emoji} ${carte.emotion_principale}\n`;
      message += `"${carte.message_original.substring(0, 50)}..."\n\n`;
    });

    message += `üí° Plus d'options :\n`;
    message += `‚Ä¢ "journal semaine" - 7 derniers jours\n`;
    message += `‚Ä¢ "journal mois" - 30 derniers jours\n`;
    message += `‚Ä¢ "journal stats" - Tes statistiques`;

    return message;
  }

  static handleHabitudes(userId) {
    if (!userData[userId] || !userData[userId].cartes || userData[userId].cartes.length < 5) {
      return `üîÑ TES HABITUDES √âMOTIONNELLES\n\nPas encore assez de donn√©es pour d√©tecter tes habitudes.\n\nMinimum 5 messages n√©cessaires.\nActuel : ${userData[userId]?.cartes?.length || 0} messages.\n\nContinue √† partager tes √©motions ! üòä`;
    }

    return `üß† TES HABITUDES √âMOTIONNELLES\n\nAnalyse en cours...\n\nüîç D√©tails disponibles :\n‚Ä¢ "habitudes temps" - Rythmes temporels\n‚Ä¢ "habitudes relations" - Impact personnes\n‚Ä¢ "habitudes lieux" - Influence environnement\n\nPlus de donn√©es = plus de r√©v√©lations ! üí™`;
  }

  static handleParametres(userId) {
    const config = userData[userId]?.config || defaultUserConfig;
    const meteoStatus = config.meteo_active ? 'activ√©e' : 'd√©sactiv√©e';
    const notifsStatus = config.notifications.rappels_quotidiens ? 'activ√©es' : 'd√©sactiv√©es';

    return `‚öôÔ∏è TES PARAM√àTRES\n\nüå§Ô∏è M√©t√©o : ${meteoStatus}\n‚Ä¢ "m√©t√©o on/off" - Activer/d√©sactiver\n\nüîî Notifications : ${notifsStatus}\n‚Ä¢ "notifications on/off" - Activer/d√©sactiver\n\nüìä Donn√©es :\n‚Ä¢ "export" - Exporter tes donn√©es\n‚Ä¢ "reset" - Tout effacer\n\n‚ùì "aide" - Guide d'utilisation`;
  }

  static handleAide(userId) {
    return `‚ùì GUIDE MOODMAP\n\nüí¨ UTILISATION :\nRaconte-moi simplement ce que tu ressens !\n\nüìö COMMANDES :\n‚Ä¢ "journal" - Historique √©motions\n‚Ä¢ "habitudes" - Tes patterns\n‚Ä¢ "param√®tres" - Configuration\n\nüîß UTILE :\n‚Ä¢ "annule" - Efface derni√®re carte\n‚Ä¢ "aide journal" - Aide sp√©cifique\n\nJe suis l√† pour t'aider √† mieux te comprendre ! üòä`;
  }

  static handleAnnule(userId) {
    if (!userData[userId] || !userData[userId].cartes || userData[userId].cartes.length === 0) {
      return `‚ùå Aucune carte √† annuler.`;
    }

    userData[userId].cartes.pop();
    return `‚úÖ Derni√®re carte annul√©e. Tu peux recommencer ! üòä`;
  }

  static handleMeteoOn(userId) {
    if (!userData[userId].config) userData[userId].config = {...defaultUserConfig};
    userData[userId].config.meteo_active = true;
    return `üå§Ô∏è M√©t√©o activ√©e ! Tes prochaines cartes auront leur m√©t√©o √©motionnelle.`;
  }

  static handleMeteoOff(userId) {
    if (!userData[userId].config) userData[userId].config = {...defaultUserConfig};
    userData[userId].config.meteo_active = false;
    return `üå§Ô∏è M√©t√©o d√©sactiv√©e. Tes cartes seront plus simples.`;
  }

  static handleNotificationsOn(userId) {
    if (!userData[userId].config) userData[userId].config = {...defaultUserConfig};
    userData[userId].config.notifications.rappels_quotidiens = true;
    return `üîî Notifications activ√©es ! (Fonctionnalit√© en d√©veloppement)`;
  }

  static handleNotificationsOff(userId) {
    if (!userData[userId].config) userData[userId].config = {...defaultUserConfig};
    userData[userId].config.notifications.rappels_quotidiens = false;
    return `üîî Notifications d√©sactiv√©es.`;
  }

  static handleExport(userId) {
    return `üìä Export de donn√©es (fonctionnalit√© en d√©veloppement)\n\nBient√¥t disponible :\n‚Ä¢ Export CSV\n‚Ä¢ Export PDF\n‚Ä¢ Envoi par email`;
  }

  static handleReset(userId) {
    return `‚ö†Ô∏è ATTENTION - RESET TOTAL\n\nCela effacera TOUTES tes donn√©es :\n‚Ä¢ Toutes tes cartes √©motionnelles\n‚Ä¢ Tous tes habitudes\n‚Ä¢ Tous tes param√®tres\n\nPour confirmer, tape :\nCONFIRMER RESET`;
  }
}

// ===== G√âN√âRATEUR DE CARTES √âMOTIONNELLES =====
// TEMPLATE MVP : Format valid√©, simple et efficace
// STRUCTURE : M√©t√©o (optionnelle) + √âmotions + R√©sum√© + Action annulation
// PRINCIPE : Pas de fioritures, focus sur l'information utile
// M√âT√âO : Syst√®me fig√© familles √ó intensit√© (1-5) pour coh√©rence totale
function generateCarteEmotionnelle(analysis, messageOriginal, userId) {
  const config = userData[userId]?.config || defaultUserConfig;
  const carteId = Date.now().toString();
  
  // Pr√©parer m√©t√©o si activ√©e
  let meteoLine = '';
  let meteoEmoji = '';
  let meteoNom = '';
  
  if (config.meteo_active) {
    // Convertir intensit√© 1-10 vers niveau m√©t√©o 1-5
    // Intensit√© 1-2 ‚Üí niveau 1, 3-4 ‚Üí niveau 2, 5-6 ‚Üí niveau 3, 7-8 ‚Üí niveau 4, 9-10 ‚Üí niveau 5
    const intensiteAnalyse = analysis.intensite || 5; // Fallback niveau 3 (milieu)
    const niveauMeteo = Math.min(5, Math.max(1, Math.ceil(intensiteAnalyse / 2)));
    
    // R√©cup√©rer la m√©t√©o de la famille avec le bon niveau
    const familleMeteos = meteoEmotionnelle[analysis.famille] || meteoEmotionnelle['s√©r√©nit√©'];
    const meteo = familleMeteos[niveauMeteo - 1]; // Index 0-4 pour niveau 1-5
    
    meteoEmoji = meteo.emoji;
    meteoNom = meteo.label;
    meteoLine = `${meteoEmoji} ${meteoNom}\n\n`;
  }
  
  // Construire la carte
  let carte = meteoLine;
  
  carte += `√âmotions d√©tect√©es :\n`;
  carte += `- ${analysis.emotion_principale}`;
  if (analysis.nuance) carte += ` (${analysis.nuance})`;
  carte += ` ‚Äî Intensit√© : ${analysis.intensite}/10\n`;
  
  // √âmotions secondaires
  if (analysis.emotions_secondaires && analysis.emotions_secondaires.length > 0) {
    analysis.emotions_secondaires.slice(0, 2).forEach(emo => {
      carte += `- ${emo.emotion} ‚Äî Intensit√© : ${emo.intensite}/10\n`;
    });
  }
  
  carte += `\nR√©sum√© :\n`;
  carte += analysis.cause || `Tu ressens ${analysis.emotion_principale} √† un niveau ${analysis.intensite}/10.`;
  
  carte += `\n\nPour annuler cette carte, r√©ponds : annule (dans la minute).`;
  
  // Stocker la carte avec les nouvelles donn√©es m√©t√©o
  const carteData = {
    id: carteId,
    timestamp: new Date().toISOString(),
    message_original: messageOriginal,
    emotion_principale: analysis.emotion_principale,
    famille: analysis.famille,
    intensite: analysis.intensite,
    nuance: analysis.nuance,
    cause: analysis.cause,
    emotions_secondaires: analysis.emotions_secondaires,
    meteo_emoji: meteoEmoji,
    meteo_nom: meteoNom,
    meteo_niveau: config.meteo_active ? Math.min(5, Math.max(1, Math.ceil((analysis.intensite || 5) / 2))) : null
  };
  
  if (!userData[userId]) {
    userData[userId] = {
      cartes: [],
      config: {...defaultUserConfig},
      last_message: null
    };
  }
  
  userData[userId].cartes.push(carteData);
  userData[userId].last_message = messageOriginal.toLowerCase().trim();
  
  return carte;
}

// ===== GESTIONNAIRE DE R√âPONSES AUTOMATIQUES =====
// PRINCIPE MVP : R√©ponses adapt√©es et empathiques pour chaque cas particulier
function handleSpecialCases(inputType, message, userId) {
  switch (inputType.type) {
    case 'empty':
      return `Tu n'as rien √©crit‚Ä¶ Parle-moi de ton humeur, je suis l√† pour √ßa ! üòä`;
      
    case 'greeting':
      return `üåà Bienvenue sur MoodMap ! Raconte-moi ce que tu ressens ou ce qui t'a travers√© aujourd'hui üòä`;
      
    case 'too_short':
      return `Dis-m'en un peu plus sur ce que tu ressens, pour que je puisse l'analyser ! üòä`;
      
    case 'too_long':
      return `C'est un peu long pour moi‚Ä¶ Peux-tu r√©sumer ton ressenti principal en une ou deux phrases ? üòä`;
      
    case 'insulte':
      return `Merci, √ßa me touche ! Mais si tu me disais plut√¥t pourquoi tu as besoin de t'exprimer ainsi ? üòâ`;
      
    case 'spam':
      return `Si tu veux tester, partage-moi une vraie √©motion ‚Äî c'est plus fun üòä`;
      
    case 'charabia':
      return `J'ai un peu de mal √† comprendre. Peux-tu reformuler ton √©motion ou ton ressenti ? üòä`;
      
    case 'duplicate':
      return `Tu m'as d√©j√† dit √ßa‚Ä¶ Dis-moi si tu veux partager autre chose ! üòä`;
      
    default:
      return null;
  }
}

// ===== INITIALISATION UTILISATEUR =====
function initializeUser(userId) {
  if (!userData[userId]) {
    userData[userId] = {
      cartes: [],
      habitudes: [],
      config: {...defaultUserConfig},
      last_message: null,
      stats: {
        total_messages: 0,
        premiere_utilisation: new Date().toISOString(),
        derniere_activite: new Date().toISOString()
      }
    };
    console.log(`üë§ Nouvel utilisateur initialis√©: ${userId}`);
  }
  
  userData[userId].stats.derniere_activite = new Date().toISOString();
}

// ===== ROUTE WEBHOOK PRINCIPALE =====
app.post('/webhook', async (req, res) => {
  try {
    const messageBody = req.body.Body;
    const fromNumber = req.body.From;
    
    console.log(`üì± Message re√ßu de ${fromNumber}: "${messageBody}"`);
    
    // Initialiser utilisateur
    initializeUser(fromNumber);
    
    // D√©tecter type d'entr√©e
    const inputType = InputDetector.detectType(messageBody, fromNumber);
    console.log(`üîç Type d√©tect√©: ${inputType.type}`);
    
    let responseMessage;
    
    // G√©rer commandes
    if (inputType.type === 'command') {
      const handler = CommandHandler[inputType.handler];
      if (handler) {
        responseMessage = handler(fromNumber);
      } else {
        responseMessage = `‚ùå Commande non reconnue. Tape "aide" pour voir les commandes disponibles.`;
      }
    }
    // G√©rer cas sp√©ciaux
    else if (inputType.type !== 'emotion') {
      responseMessage = handleSpecialCases(inputType, messageBody, fromNumber);
    }
    // Traiter √©motion
    else {
      console.log('üîÑ Analyse √©motionnelle en cours...');
      
      const analysis = await analyzeEmotionWithMistral(messageBody);
      console.log('üìä Analyse compl√®te:', analysis);
      
      responseMessage = generateCarteEmotionnelle(analysis, messageBody, fromNumber);
      
      userData[fromNumber].stats.total_messages += 1;
      console.log(`üíæ Carte √©motionnelle stock√©e pour ${fromNumber}`);
    }
    
    // Envoyer r√©ponse
    const twiml = new twilio.twiml.MessagingResponse();
    twiml.message(responseMessage);
    
    res.type('text/xml').send(twiml.toString());
    console.log('‚úÖ R√©ponse envoy√©e avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå Erreur webhook:', error);
    
    const errorMessage = `ü§ñ Oups ! Petite erreur technique...\n\nR√©essaie dans quelques secondes ou tape "aide" pour le guide d'utilisation.`;
    
    const twiml = new twilio.twiml.MessagingResponse();
    twiml.message(errorMessage);
    
    res.type('text/xml').send(twiml.toString());
  }
});

// ===== ROUTES SANT√â =====
app.get('/', (req, res) => {
  const stats = {
    version: "6.0 PRODUCT",
    uptime: process.uptime(),
    users: Object.keys(userData).length,
    total_cartes: Object.values(userData).reduce((sum, user) => sum + (user.cartes?.length || 0), 0),
    features: [
      "UX Clean & Product-Ready",
      "Gestion cas particuliers compl√®te", 
      "Template carte simplifi√©",
      "Navigation intuitive",
      "Param√®tres utilisateur",
      "Syst√®me d'aide int√©gr√©",
      "M√©t√©o syst√®me fig√© (familles √ó intensit√©)"
    ]
  };
  
  res.json({
    status: "üöÄ MoodMap V6.0 PRODUCT op√©rationnel !",
    stats: stats
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: '6.0'
  });
});

// ===== D√âMARRAGE SERVEUR =====
app.listen(port, () => {
  console.log(`üöÄ MoodMap WhatsApp Bot V6.0 PRODUCT d√©marr√© sur port ${port}`);
  console.log(`üéØ Focus UX : Clean, Sans Friction, Product-Ready`);
  console.log(`üß† IA √âmotionnelle : Analyse Mistral int√©gr√©e`);
  console.log(`üîß Gestion cas particuliers : Compl√®te`);
  console.log(`üì± Template cartes : Simplifi√© et efficace`);
  console.log(`‚öôÔ∏è Param√®tres utilisateur : Configurables`);
  console.log(`üå§Ô∏è M√©t√©o syst√®me fig√© : 10 familles √ó 5 intensit√©s`);
  console.log(`üí™ Ready for real users !`);
});
